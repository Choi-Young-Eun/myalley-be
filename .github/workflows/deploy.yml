name: MyAlley

on:
  push:
    branches: [main, deploy]

jobs:
  Deploy:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: benjlevesque/short-sha@v2.1
        id: short-sha
        with:
          length: 6

      - name: IMAGE_TAG
        run: |
          echo IMAGE_TAG=deploy >> $GITHUB_ENV

      - name: Create .env file
        run: |
          touch .env
          echo IMAGE_TAG=deploy >> .env
          echo ECR_REGISTRY=${{ secrets.ECR_REGISTRY }} >> .env
          echo ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }} >> .env
          echo MYSQL_URL=${{ secrets.MYSQL_URL }} >> .env
          echo MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }} >> .env
          echo MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} >> .env
          echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> .env
          echo REDIS_PORT=${{ secrets.REDIS_PORT }} >> .env
          echo S3_BUCKET=${{ secrets.S3_BUCKET }} >> .env
          echo S3_ACCESS_KEY=${{ secrets.SERVICE_AWS_ACCESS_KEY_ID }} >> .env
          echo S3_SECRET_KEY=${{ secrets.SERVICE_AWS_SECRET_ACCESS_KEY }} >> .env
          cat .env

      - name: Create key.pem file
        run: |
          echo "${{ secrets.EC2_PEM_KEY }}" | tr -d '\r' > key.pem
          chmod 400 key.pem

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: upload image to Amazon ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ steps.login-ecr.outputs.registry }}
          cache_from: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          repo: ${{ secrets.ECR_REPOSITORY }}
          region: ap-northeast-2
          auto_tag: false
          tags: "${{ env.IMAGE_TAG }}-${{ steps.short-sha.outputs.sha }},${{ env.IMAGE_TAG }}"

      - name: copy file via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          port: ${{ secrets.EC2_PORT }}
          username: ${{ secrets.EC2_USERNAME }}
          key_path: ./key.pem
          source: ".env,docker-compose.yml"
          target: "my-alley"

      - name: executing remote ssh commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          port: ${{ secrets.EC2_PORT }}
          username: ${{ secrets.EC2_USERNAME }}
          key_path: ./key.pem
          debug: true
          script: |
            cd my-alley
            docker login -u AWS -p $(aws ecr get-login-password --region ap-northeast-2) ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            docker-compose -f docker-compose.yml down
            docker-compose -f docker-compose.yml up -d
            docker image prune -a -f
            if [[ $(docker ps -f name=my-alley | grep -w my-alley | wc -l) == 1 ]]; then exit 0; else exit 1; fi
